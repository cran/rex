% Generated by roxygen2 (4.0.2.9000): do not edit by hand
% Please edit documentation in R/shortcuts.R
\docType{data}
\name{shortcuts}
\alias{shortcuts}
\title{Shortcuts}
\format{\preformatted{List of 114
 $ dot                  :Class 'regex'  chr "\\\\."
 $ any                  :Class 'regex'  chr "."
 $ something            :Class 'regex'  chr ".+"
 $ anything             :Class 'regex'  chr ".*"
 $ start                :Class 'regex'  chr "^"
 $ end                  :Class 'regex'  chr "$"
 $ alnum                :Classes 'character_class', 'regex'  chr "[:alnum:]"
 $ alpha                :Classes 'character_class', 'regex'  chr "[:alpha:]"
 $ letter               :Classes 'character_class', 'regex'  chr "[:alpha:]"
 $ blank                :Classes 'character_class', 'regex'  chr "[:blank:]"
 $ cntrl                :Classes 'character_class', 'regex'  chr "[:cntrl:]"
 $ digit                :Classes 'character_class', 'regex'  chr "[:digit:]"
 $ number               :Classes 'character_class', 'regex'  chr "[:digit:]"
 $ graph                :Classes 'character_class', 'regex'  chr "[:graph:]"
 $ lower                :Classes 'character_class', 'regex'  chr "[:lower:]"
 $ print                :Classes 'character_class', 'regex'  chr "[:print:]"
 $ punct                :Classes 'character_class', 'regex'  chr "[:punct:]"
 $ space                :Classes 'character_class', 'regex'  chr "[:space:]"
 $ upper                :Classes 'character_class', 'regex'  chr "[:upper:]"
 $ xdigit               :Classes 'character_class', 'regex'  chr "[:xdigit:]"
 $ newline              :Class 'regex'  chr "\\\\R"
 $ single_quote         :Classes 'character_class', 'regex'  chr "'"
 $ double_quote         :Classes 'character_class', 'regex'  chr "\\""
 $ quote                :Classes 'character_class', 'regex'  chr "'\\""
 $ alnums               :Class 'regex'  chr "[[:alnum:]]+"
 $ alphas               :Class 'regex'  chr "[[:alpha:]]+"
 $ letters              :Class 'regex'  chr "[[:alpha:]]+"
 $ blanks               :Class 'regex'  chr "[[:blank:]]+"
 $ cntrls               :Class 'regex'  chr "[[:cntrl:]]+"
 $ digits               :Class 'regex'  chr "[[:digit:]]+"
 $ numbers              :Class 'regex'  chr "[[:digit:]]+"
 $ graphs               :Class 'regex'  chr "[[:graph:]]+"
 $ lowers               :Class 'regex'  chr "[[:lower:]]+"
 $ prints               :Class 'regex'  chr "[[:print:]]+"
 $ puncts               :Class 'regex'  chr "[[:punct:]]+"
 $ spaces               :Class 'regex'  chr "[[:space:]]+"
 $ uppers               :Class 'regex'  chr "[[:upper:]]+"
 $ xdigits              :Class 'regex'  chr "[[:xdigit:]]+"
 $ newlines             :Class 'regex'  chr "\\\\R+"
 $ single_quotes        :Class 'regex'  chr "[']+"
 $ double_quotes        :Class 'regex'  chr "[\\"]+"
 $ quotes               :Class 'regex'  chr "['\\"]+"
 $ any_alnums           :Class 'regex'  chr "[[:alnum:]]*"
 $ any_alphas           :Class 'regex'  chr "[[:alpha:]]*"
 $ any_letters          :Class 'regex'  chr "[[:alpha:]]*"
 $ any_blanks           :Class 'regex'  chr "[[:blank:]]*"
 $ any_cntrls           :Class 'regex'  chr "[[:cntrl:]]*"
 $ any_digits           :Class 'regex'  chr "[[:digit:]]*"
 $ any_numbers          :Class 'regex'  chr "[[:digit:]]*"
 $ any_graphs           :Class 'regex'  chr "[[:graph:]]*"
 $ any_lowers           :Class 'regex'  chr "[[:lower:]]*"
 $ any_prints           :Class 'regex'  chr "[[:print:]]*"
 $ any_puncts           :Class 'regex'  chr "[[:punct:]]*"
 $ any_spaces           :Class 'regex'  chr "[[:space:]]*"
 $ any_uppers           :Class 'regex'  chr "[[:upper:]]*"
 $ any_xdigits          :Class 'regex'  chr "[[:xdigit:]]*"
 $ any_newlines         :Class 'regex'  chr "\\\\R*"
 $ any_single_quotes    :Class 'regex'  chr "[']*"
 $ any_double_quotes    :Class 'regex'  chr "[\\"]*"
 $ any_quotes           :Class 'regex'  chr "['\\"]*"
 $ non_alnum            :Classes 'character_class', 'regex'  chr "^[:alnum:]"
 $ non_alpha            :Classes 'character_class', 'regex'  chr "^[:alpha:]"
 $ non_letter           :Classes 'character_class', 'regex'  chr "^[:alpha:]"
 $ non_blank            :Classes 'character_class', 'regex'  chr "^[:blank:]"
 $ non_cntrl            :Classes 'character_class', 'regex'  chr "^[:cntrl:]"
 $ non_digit            :Classes 'character_class', 'regex'  chr "^[:digit:]"
 $ non_number           :Classes 'character_class', 'regex'  chr "^[:digit:]"
 $ non_graph            :Classes 'character_class', 'regex'  chr "^[:graph:]"
 $ non_lower            :Classes 'character_class', 'regex'  chr "^[:lower:]"
 $ non_print            :Classes 'character_class', 'regex'  chr "^[:print:]"
 $ non_punct            :Classes 'character_class', 'regex'  chr "^[:punct:]"
 $ non_space            :Classes 'character_class', 'regex'  chr "^[:space:]"
 $ non_upper            :Classes 'character_class', 'regex'  chr "^[:upper:]"
 $ non_xdigit           :Classes 'character_class', 'regex'  chr "^[:xdigit:]"
 $ non_newline          :Class 'regex'  chr "^\\\\R"
 $ non_single_quote     :Classes 'character_class', 'regex'  chr "^'"
 $ non_double_quote     :Classes 'character_class', 'regex'  chr "^\\""
 $ non_quote            :Classes 'character_class', 'regex'  chr "^'\\""
 $ non_alnums           :Class 'regex'  chr "[^[:alnum:]]+"
 $ non_alphas           :Class 'regex'  chr "[^[:alpha:]]+"
 $ non_letters          :Class 'regex'  chr "[^[:alpha:]]+"
 $ non_blanks           :Class 'regex'  chr "[^[:blank:]]+"
 $ non_cntrls           :Class 'regex'  chr "[^[:cntrl:]]+"
 $ non_digits           :Class 'regex'  chr "[^[:digit:]]+"
 $ non_numbers          :Class 'regex'  chr "[^[:digit:]]+"
 $ non_graphs           :Class 'regex'  chr "[^[:graph:]]+"
 $ non_lowers           :Class 'regex'  chr "[^[:lower:]]+"
 $ non_prints           :Class 'regex'  chr "[^[:print:]]+"
 $ non_puncts           :Class 'regex'  chr "[^[:punct:]]+"
 $ non_spaces           :Class 'regex'  chr "[^[:space:]]+"
 $ non_uppers           :Class 'regex'  chr "[^[:upper:]]+"
 $ non_xdigits          :Class 'regex'  chr "[^[:xdigit:]]+"
 $ non_newlines         :Class 'regex'  chr "^\\\\R+"
 $ non_single_quotes    :Class 'regex'  chr "[^']+"
 $ non_double_quotes    :Class 'regex'  chr "[^\\"]+"
 $ non_quotes           :Class 'regex'  chr "[^'\\"]+"
 $ any_non_alnums       :Class 'regex'  chr "[^[:alnum:]]*"
 $ any_non_alphas       :Class 'regex'  chr "[^[:alpha:]]*"
 $ any_non_letters      :Class 'regex'  chr "[^[:alpha:]]*"
  [list output truncated]
}}
\usage{
shortcuts
}
\description{
Commonly used character classes and regular expressions.  These shortcuts
are substituted inside \code{rex} calls.
}
\details{
\code{names(shortcuts)} will give you the full list of available shortcuts.
}
\seealso{
Other rex: \code{\link{.}}, \code{\link{capture}},
  \code{\link{capture_group}};
  \code{\link{\%if_next_is\%}},
  \code{\link{\%if_next_isnt\%}},
  \code{\link{\%if_prev_is\%}},
  \code{\link{\%if_prev_isnt\%}},
  \code{\link{lookarounds}}; \code{\link{\%or\%}},
  \code{\link{or}}; \code{\link{any_of}},
  \code{\link{character_class}}, \code{\link{except}},
  \code{\link{except_any_of}},
  \code{\link{except_some_of}},
  \code{\link{exclude_range}}, \code{\link{none_of}},
  \code{\link{one_of}}, \code{\link{range}},
  \code{\link{some_of}}; \code{\link{at_least}},
  \code{\link{at_most}}, \code{\link{between}},
  \code{\link{counts}}, \code{\link{n}},
  \code{\link{n_times}}; \code{\link{group}};
  \code{\link{maybe}}, \code{\link{one_or_more}},
  \code{\link{wildcards}}, \code{\link{zero_or_more}},
  \code{\link{zero_or_one}}; \code{\link{not}};
  \code{\link{rex}}, \code{\link{rex_}}
}
\keyword{datasets}

